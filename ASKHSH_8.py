'''
-------------------------------------------------------------------------------------------------------
Πρακτικά, στην αρχή του προγράμματος
δημιουργείται η λίστα των τυχαίων αριθμών στο διάστημα [-29, 29] με
την συνάρτηση randrange(-29,30) της κλάσης random. Οι τυχαία
δημιουργούμενοι αριθμοί εκτυπώνονται στην κονσόλα για ενημέρωση του
χρήστη.  

Στην συνέχεια μία τριάδα μοντελοποιείται ως μια λίστα τριών ακεραίων.
Δεδομένου ότι οι λίστες της python είναι διατεταγμένες, έχει υλοποιηθεί
η βοηθητική μέθοδος equal() η οποία δέχεται δύο ορίσματα λιστών και
επιστρέφει true αν αυτές περιέχουν τα ίδια στοιχεία ανεξαρτήτου σειράς.
Η υλοποίηση γίνεται με βάση αυτόν τον τρόπο διότι η εκφώνηση δεν αναφέρει
ότι οι 30 τυχαίοι αριθμοί θα πρέπει να είναι μοναδικοί.

Έπητα οι συνδυασμοί τριάδων που έχουν άθροισμα 0 επιστρέφονται ως μια νέα λίστα
από τριάδες. Ο έλεγχος της ύπαρξης μιας τριάδας στην λίστα γίνεται με την
βοηθητική συνάρτηση trippleExists(). 



-------------------------------------------------------------------------------------------------------
'''




# Το πακέτο random είναι απαραίτητο για την δημιουργία τυχαίων αριθμών
import random

'''
---------------------------------------------------------------------
Δημιουργία μιας λίστας με 30 τυχαίους αριθμούς στο διάστημα (-30,30).
Ο συμβολισμός (-30,30) της εκφώνησης αφορά ανοιχτό διάστημα
δηλαδή, οι αριθμοί -30 και 30 δεν συμπεριλαμβάνονται στην λίστα.
Η συνάρτηση randrange(a,b) της random επιστρέφει έναν ψευδο-τυχαίο
ακέραιο μεταξύ του a και του b-1.
---------------------------------------------------------------------
'''
numbers = []    # Η υπό κατασκευή λίστα των αριθμών

for i in range(30):     # επανέλαβε 30 φορές

    # Η παρακάτω συνάρτηση randrange() επιστρέφει έναν ακέραιο
    # μεταξύ -29 και 29
    numbers.append(random.randrange(-29,30))

# Τυπώνουμε την λίστα των αριθμών για ενημέρωση του χρήστη
print("The random generated list of numbers in (-30,30) is:")
print(numbers)




'''
Βοηθητική συνάρτηση για τον έλεγχο ισότητας δύο τριάδων.
Δύο τριάδες είναι ίσες αν έχουν ακριβώς τα ίδια στοιχεία
ανεξαρτήτου διάταξης.
Χρησιμοποιείται από την συνάρτηση trippleExists (παρακάτω)
για να διαπιστωθεί η ύπαρξη μιας τριάδας αριθμών σε μία
λίστα τριάδων.
Τα δύο ορίσματα της συνάρτησης (t1 και t2)
είναι τριάδες ακεραίων.
'''
def equal(t1, t2):

    # Αν υπάρχει τουλάχιστον ένα στοιχείο του t1
    # που δεν υπάρχει στο t2 τότε επιστρέφει false
    for n1 in t1:
        exist = False   # Θεωρούμε ότι το n1 δεν υπάρχει στην t2
        for n2 in t2:
            if n1 == n2:   
                # Ο αριθμός n1 υπαρχει στην t2
                exist = True
        # Αν μετά τον έλεγχο όλων των αριθμών
        # στην t2 το n1 δεν υπάρχει, τότε η συνάρτηση
        # επιστρέφει false ( δηλαδή οι τριάδες διαφέρουν)
        if exist == False:
            return False

    # Αν φτάσουμε εδώ, οι δύο τριάδες είναι ίσες.
    # Επιστροφή True
    return True 



'''
-----------------------------------------------------------
Βοηθητική συνάρτηση για τον έλεγχο ύπαρξης μιας τριάδας 
σε μια λίστα τριάδων.
Κατά τον έλεγχο δεν λαμβάνεται υπόψη η διάταξη των αριθμών.
Π.χ. οι τριάδες [1,2,3] και [3,2,1] θεωρούνται ίδιες.
Αυτό γίνεται γιατί η άσκηση ζητά των συνδυασμό των τριάδων
με μηδενικό άθροισμα και προφανώς για τον υπολογισμό του
αθροίσματος δεν έχει σημασία η διάταξη των αριθμών.
Το πρώτο όρισμα (tripples) είναι μια λίστα τριάδων και το 
δεύτερο (t) η υπό εξέταση τριάδα.
Για τον έλεγχο της ισότητας γίνεται χρήση της προηγούμενης
συνάρτησης equal()
-----------------------------------------------------------
'''
def trippleExists(trippleList, t):
    for tripple in trippleList:
        if equal(tripple, t):
            # Υπάρχει στην λίστα. Επιστροφή True
            return True

    # Αν φτάσαμε εδώ, έχουν ελεγχθεί όλες οι τριάδες της λίστας
    # και δεν έχει βρεθεί η t. Επιστρέφεται false.
    return False




'''
-----------------------------------------------------------------------
Δημιουργία όλων των δυνατών συνδυασμών τριάδων μεταξύ των 30 αριθμών
Ο ίδιος αριθμός δεν μπορεί να συμμετέχει πάνω από μία φορά στην τριάδα
(εκτός αν υπάρχουν πολλαπλές εμφανίσεις του στην αρχική λίστα).
Για τον σχηματισμό των τριάδων χρησιμοποιούμε ένα τριπλό βρόγχο 
επανάληψης.
Οι τριάδες αποθηκεύονται σε μία νέα λίστα τριάδων.
-----------------------------------------------------------------------
'''
tripples = []   # Η υπό κατασκευή λίστα τριάδων

# Με την παρακάτω δομή στην τελευταία επανάληψη θα συμπεριληφθεί
# η τριάδα numbers[27], numbers[28], numbers[29] δηλαδή,
# οι τρεις τελευταίοι αριθμοί
for i in range(28):                 # από 0 έως 27  
    for j in range(i+1, 29):        # από i+1 έως 28
        for k in range(j+1, 30):    # από j+1 εως 29
            
            # Η νέα τριάδα
            t = [numbers[i], numbers[j], numbers[k]]
            
            # Ελέγχουμε αν η t υπάρχει ήδη στην λίστα.
            # Αν ναι, δεν προστίθεται.
            # Ο έλεγχος γίνεται με την συνάρτηση trippleExists
            if not trippleExists(tripples, t): 
                tripples.append(t)
            
# Εκτύπωση του πλήθους των διακεκριμμένων τριάδων
print("")
print("There are", len(tripples), "distinct triples.")                
            



'''
------------------------------------------------------------------ 
Διατρέχουμε την λίστα των διακεκριμμένων τριάδων και για κάθε τριάδα αριθμών
προσθέτουμε τα μέλη της. Αν είναι μηδέν την κρατάμε σε ξεχωριτσή λίστα
------------------------------------------------------------------
'''
zeroTripples = []   # τριάδες με μηδενικό άθροισμα
for t in tripples:
    sum = t[0] + t[1] + t[2]
    if sum == 0:
        zeroTripples.append(t)
        
# Αν το πλήθος των μηδενικών τριάδων είναι μεγαλύτερο του μηδενός
# τις τυπώνουμε. Διαφορετικά, ενημερώνουμε τον χρήστη.
if len(zeroTripples) > 0:
    print("")   # μια κενή γραμμή
    print("There are", len(zeroTripples), "triples summing to zero:")
    for t in zeroTripples:
        print(t)
else:
    print("There is no tripple summing to zero")

