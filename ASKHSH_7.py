'''
---------------------------------------------------------------------------------------------------------------
Η άσκηση υλοποιείται με βάση την ακόλουθη συλλογιστική:

1. Λαμβάνεται η τρέχουσα ημερομηνία και αποσπώνται το έτος,
ο μήνας, η ημέρα του μήνα και ο κωδικός της ημέρας της εβδομάδος (0 = Δευτέρα, 6 = Κυριακή).

2. Οι ημερομηνίες που συμπίπτουν με την τρέχουσα ημέρα της εβδομάδας και
του μήνα διατηρούνται σε μία δομή λίστας.

3. Ελέγχουμε τους υπόλοιπους μήνες του τρέχοντος έτους αν η  παραπάνω
ημέρα του μήνα "πέφτει" την ίδια ημέρα της εβδομάδος.

4. Ελέγχουμε τα επόμενα 10 χρόνια για το παραπάνω κριτήριο.

5. Για κάθε επαλήθευση στα βήματα 3 και 4 προστίθεται η ανάλογη ημερομηνία στη δομή.

6. Εκτυπώνονται όλες οι αποδεκτές ημερομηνίες της δομής καθώς και το πλήθος τους.

Να σημειωθεί ότι ελέγχονται τα επόμενα 10 χρόνια από το τρέχον έτος.
Π.χ. αν έχουμε 2018 ελέγχουμε τα χρόνια από 2019 μέχρι 2028.
Αν και δεν αναφέρεται κάτι σχετικό στην άσκηση, εξαντλούμε και τους μήνες του τρέχοντος έτους. 
----------------------------------------------------------------------------------------------------------------
'''

'''
Για την συγκεκριμένη άσκηση γίνεται χρήση της
μονάδας διαχείρισης ημερομηνιών datetime
'''

# Φορτώνουμε το module
# για τη διαχείριση ημερομηνιών
import datetime


'''
--------------------------------------------------------
Βοηθητική συνάρτηση για την διαμόρφωση μιας ημερομηνίας
(datetime) σε μορφή ηη/μμ/εεεε
--------------------------------------------------------
'''
def formatDate(dt):
    return "%02d/%02d/%4d" % (dt.day, dt.month, dt.year)


# Παίρνουμε την σημερινή ημερομηνία
# και αποσπούμε την ημέρα, μήνα και έτος
# Παίρνουμε επίσης και την ημέρα της
# εβδομάδας (weekday) με την εξής κωδικοποιήση:
# 0 -> Δευτέρα
# 1 -> Τρίτη
# 2 -> Τετάρτη
# 3 -> Πέμπτη
# 4 -> Παρασκευή
# 5 -> Σάββατο
# 6 -> Κυριακή
today = datetime.date.today()
year = today.year
month = today.month
day = today.day
weekday = today.weekday()

# Δημιουργούμε μια λίστα με τις περιγραφές των ημερών
# σύμφωνα με την παραπάνω αντιστοιχιση
# Θα χρησιμοποιηθεί στην συνέχεια, στην εκτύπωση των αποτελεσμάτων
days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

# Αρχικοποίηση λίστας ημερομηνιών
# Θα αποθηκεύονται οι επιθυμητές ημερομηνίες
# και στο τέλος θα εκτυπωθεί το πλήθος τους
dateList = []

# Ελέγχουμε αρχικά τους υπόλοιπους μήνες
# του τρέχοντος έτους
for m in range(month+1, 13):

    # Ελέγχουμε αν η ημερομηνία day/m/year
    # είναι weekday. Ο έλεγχος γίνεται εντός 
    # ενός try block γιατί μπορεί ο συνδυασμός
    # έτους, μήνα, ημέρας να μην είναι έγκυρος
    try:
        newDate = datetime.date(year, m, day)
        if newDate.weekday == weekday:
            dateList.append(newDate)
    except:
        # Συνεχίζουμε με τον επόμενο συνδυασμό
        continue    
    

# Ελέγχουμε τα υπόλοιπα 10 χρόνια
for y in range(year+1, year+11):
    for m in range(1, 13):  # για κάθε μήνα του έτους
        try:
            newDate = datetime.date(y, m, day)
            if newDate.weekday() == weekday:
                dateList.append(newDate)
        except:
            continue


# Εκτύπωση αποτελεσμάτων
print("")   
print("Today is " + formatDate(today) + " and is " + days[weekday] + ".")
print("There are", len(dateList), "dates in the next 10 years on the", day, "of month that are also", days[weekday]+"s!")
if len(dateList) > 0:
    print("These are the following:")
    for dt in dateList:
        print(formatDate(dt))


