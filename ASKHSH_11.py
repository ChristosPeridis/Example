'''
------------------------------------------------------------------------------------------------------------------
Το πρόγραμμα λειτουργεί γενικά ως εξής:


1. Λαμβάνεται το όνομα του αρχείου που περιέχει το λεξικό.

2. Λαμβάνεται η επόμενη λέξη από το αρχείο του λεξικού και αναζητείται οριζόντια στον αρχικό πίνακα
και οριζόντια στον ανάστροφο (το οποίο αντιστοιχεί σε κάθετη αναζήτηση στον αρχικό).

3. Αν η λέξη βρεθεί προστίθεται σε μία δομή set της python ώστε να μην υπάρχουν επαναλήψεις.
Πριν την αναζήτηση σε κάθε γραμμή γίνεται μετατροπή της λίστας χαρακτήρων σε string με την εντολή join().

4. Αν υπάρχουν και άλλες λέξεις στο λεξικό επαναλαμβάνουμε από το βήμα 2.

5. Τυπώνεται το αποτέλεσμα της αναζήτησης.
------------------------------------------------------------------------------------------------------------------
'''

import random

'''
-------------------------------------------
Ορίζουμε την λίστα των έγκυρων χαρακτήρων
-------------------------------------------
'''
CHARS = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']



'''
-----------------------------------------------------
Δημιουργία ενός πίνακα 100Χ100 με τυχαίους χαρακτήρες
-----------------------------------------------------
'''

# Το τετράγωνο που θα επιστραφεί.
# Αρχικοποιείται σε κενή λίστα.
# Θα δημιουργηθεί μια λίστα γραμμών 
# όπου κάθε γραμμή είναι μια λίστα χαρακτήρων
square = []

# Το πλήθος των έγκυρων χαρακτήρων της λίστας CHARS
n = len(CHARS)

# Δημιουργείται ένας διπλός βρόγχος επανάληψης
# για το τετράγωνο διαστάσεων 100Χ100
for i in range(100):
	
	# Δημιουργία μιας νέας κενής γραμμής
	row = []

	# Για κάθε στήλη παίρνουμε έναν τυχαίο αριθμό
	# με την χρήση της randrange της random
	# και εισάγουμε στην γραμμή την αντίστοιχη 
	# καταχώρηση της λίστας CHARS
	for j in range(100):
		num = random.randrange(0,n)
		row.append(CHARS[num])

	# Προσθήκη της γραμμής στο τετράγωνο
	square.append(row)


'''
------------------------------------------------------------
Αν και δεν ζητείται ρητά από την άσκηση, γίνεται αποθήκευση
του τετραγώνου στο αρχείο κειμένου square.txt για αναφορά
------------------------------------------------------------
'''

# Ανοίγουμε το αρχείο για εγγραφή
fw = open('square.txt', 'w')

# Το square είναι μια λίστα γραμμών
# και κάθε γραμμή μια λίστα χαρακτήρων
for i in range(100):
	for j in range(100):
		fw.write(square[i][j])
	fw.write("\n")	# Αλλαγή γραμμής

fw.close()
print("The random generated square has been saved to file 'square.txt'")	



'''
----------------------------------------------------------
Επειδή η αναζήτηση ταιριάσματος θα γίνεται κατά γραμμές
δημιουργούμε και τον ανάστροφο πίνακα 
ώστε και η κατακόρυφη αναζήτηση να γίνει με τον ίδιο τρόπο
----------------------------------------------------------
'''
squareT = []	# Το ανάστροφο τετράγωνο (γραμμές->στήλες)

for j in range(100):		# για κάθε στήλη του square

	# Νέα στήλη
    col = []

    for i in range(100):	# για κάθε γραμμή του square
    	col.append(square[i][j])
    	
    # Προσθέτουμε την στήλη στον ανάστροφο 
    squareT.append(col)





'''
---------------------------------------------------------
Παίρνουμε το όνομα του αρχείου του λεξικού από τον χρήστη
Αν το αρχείο δεν υπάρχει, ενημερώνουμε τον χρήστη και 
τερματίζουμε την εφαρμογή.
Διαφορετικά φορτώνουμε το αρχείο στην λίστα words 
γραμμή προς γραμμή.
Το λεξικό είναι μια λίστα αλφαριθμητικών.
Για να μην συμπεριληφθούν οι χαρακτήρες αλλαγής γραμμής
διαβάζεται αρχικά ολόκληρο το αρχείο και στη συνέχεια
γίνεται διαχωρισμός των γραμμών με την splitlines()
---------------------------------------------------------
'''
words = []	# Το λεξικό που θα φορτωθεί από το αρχείο

try:
    fileName = input("Please give the dictionary file name> ")
    fr = open(fileName)
    words = fr.read().splitlines()
    fr.close()
except:
	print("Error opening dictionary file")
	exit(0)




'''
--------------------------------------------------------------------------
Γίνεται αναζήτηση κάθε λέξης του λεξικού οριζόντια και κάθετα
Τα αποτελέσματα αποθηκεύονται σε ένα set για να μην υπάρχουν διπλότυπα
--------------------------------------------------------------------------
'''
results = set()
for w in words:
	
	# Αναζήτηση οριζοντια
	for line in square:
		
		# Μετατροπή της γραμμής σε string
		strLine = ''.join(line)
				
		# Έλεγχος ύπαρξης της λέξης w στο strLine
		if w in strLine:
			results.add(w)

	# Αναζήτηση κατακόρυφα
	for line in squareT:
		
		# Μετατροπή της γραμμής σε string
		strLine = ''.join(line)
				
		# Έλεγχος ύπαρξης της λέξης w στο strLine
		if w in strLine:
			results.add(w)



'''
-----------------------
Εκτύπωση αποτελέσματος
-----------------------
'''
if len(results) == 0:
	print("No word form the dictionary have been found in the square!")
else:
	print("The words from the dictionary that have been found in the square are:")
	for word in results:
		print(word)




